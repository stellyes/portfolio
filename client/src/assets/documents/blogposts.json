[
  {
    "id": 1,
    "url": "mithral-deep-dive",
    "title": "In review: Mithral.js",
    "date": "October 17, 2023",
    "preview": "Opinion pieces about which JavaScript framework is best are a dime-a-dozen. Instead of that, I hope to give an objective look into lightweight frameworks and their benefits, when using...",
    "content": "# Mithral.js — a look into lightweight JavaScript frameworks.\n\n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SmKK2kuO2T0p2zbLtt--sQ.png) \n\nOpinion pieces about which JavaScript framework is best are a dime-a-dozen. Instead of that, I hope to give an objective look into lightweight frameworks and their benefits, when using lighter frameworks are more practical, and why my recent experience using the [Mithral.js](https://mithril.js.org/index.html) framework shined a light on the advantages of using lighter frameworks.\n\n## “Light JavaScript Framework”, and what this means.\n\nA small framework comes with some massive performance benefits. The largest benefit is the reduction of page load time. Full stack web applications have a lot of moving parts, and the size of those parts contributes to your website’s performance. Having a smaller size framework can make room for other web frameworks and increase modularity in your software stack, if you so desire.\n\nDepending on how complex an application is, the time it takes to load and render data is critical to maintaining large applications. The widely used lightweight framework [Vue.js](https://vuejs.org/) boasts a fast 9.8ms response time, but also has the ability to throttle performance on slow network connections to ensure consistency across a broader audience of web users.\n\nThese lighter frameworks also come with the benefit of having a softer learning curve. Looking at Mithral, the documentation displays a simple, readable, look at representing the core essentials for getting your web application running. These traits aren’t exclusive to light frameworks, but small size will almost always put constraints on how verbose a framework can be. Mithral (and Vue) only have 14 functions to utilize.\n\n## Simplicity isn’t always key, though.\n\nWhile it can be easy to adopt and implement lighter frameworks, developing a more complex web application will sometimes require a bit more creativity.\n\nIf we look at [React.js](https://react.dev/), UI elements are at the core of its functionality. A component in React receives data and sends HTML objects, allowing for a very clear workflow and dynamic way of building a page’s user interface. This is a common feature in larger sized frameworks.\n\nLighter frameworks would require a good CSS framework and a bit of elbow grease to accomplish the same functionality built into larger-sized frameworks. This isn’t always the case, though. In the instance of [jQuery](https://jquery.com/), the accompanying (and equally lightweight) [jQuery UI](https://jqueryui.com/) framework provides drag-and-drop style UI features in their API.\n\n## Closing thoughts\n\nIn my recent experience, I learned to appreciate how easy it was to jump into a project when I was using Mithral. Representing DOM elements was straightforward and intuitive, which allowed me to spread my wings a bit more when building out the user interface and styling my webpages.\n\nThe application was small, but I would absolutely use Mithral again for larger scale applications. I personally enjoy having a lot of finite control with my webpage’s appearance, and Mithral gave me all the space necessary to have this. I would absolutely recommend this framework to anybody of like-mind.\n\nOverall, I’d love to explore other lightweight frameworks and figure out the best use case for each one."
  },
  {
    "id": 2,
    "url": "quick-n-easy-jwt",
    "title": "A Quick ‘n Easy Guide to JWTs",
    "date": "November 15, 2023",
    "preview": "So, what’s a JWT anyway?  JWTs are JSON Web Tokens. They’re signed web tokens used for a range of purposes, but are frequently used for authorization’s sake or for simple information exchanges...",
    "content": "# A Quick ‘n Easy Guide to JWTs\n\n![Source: pretty-software.com](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ZC3xzBvKDMDiW-UIEO61AA.jpeg)\n\n## So, what’s a JWT anyway?\n\nJWTs are JSON Web Tokens. They’re signed web tokens used for a range of purposes, but are frequently used for authorization’s sake or for simple information exchanges.\n\nEach JWT is “signed.” The signature is identifying information for the purpose of security between the client and server. Signed tokens verify the information within the token payload. JWTs differ from encrypted tokens which mask data from public view by only skewing the way the information is presented. Ultimately, though, the information is still publicly available since the signature is generated using the data from the header and payload sections of the JWT.\n\nWhen used strictly for authorization, JWTs can be used to grant logged-in users access to protected routes and resources on your web application. In modern web applications, this is handled with the [Single Sign On (SSO)](https://www.papercut.com/help/manuals/ng-mf/common/sso/) feature.\n\n## How to speak JWT\n\nEach JWT has three sections: **Header**, **Payload**, and **Signature.**\n\n### Header\n\nThe header section will almost always contain information about which type of token it is (JWT) and the algorithm being used, typically either SHA256 or RSA.\n\n[RSA](https://www.britannica.com/topic/RSA-encryption) is a two-part encryption method secure enough to have a “public” key and a private key. Some variants of the RSA encryption algorithm use hashing algorithms (like SHA) to build their elaborate cryptographic functions.\n\n[SHA256](https://brilliant.org/wiki/secure-hashing-algorithms/) is a hashing algorithm that directly correlates with the information being hashed. The algorithm isn’t used to secure data, but instead acts as a building block to other algorithms and digital signature acts.\n\nAn example of a decoded JWT header would look something like this:\n\n```\n{\n\t\"alg\": \"HS256\",\n\t\"typ\": \"JWT\"\n }\n```\n\nThe `alg` key specifies which algorithm is used to encode the data of the JWT. In this example, `HS256` specifies that we’re using SHA256, and `typ` specifies that the type of token we’re decoding is a JWT.\n\n### Payload\n\nThe payload section of a JWT will typically contain three sections within itself, the **Registered Claims**, the **Public Claims**, and the **Private Claims.**\n\nRegistered claims typically cover the details of where the data came from, when the data should be considered “expired,” and who the intended audience is. This is all highlighted in the following JWT snippet:\n\n```\n{\n\t\"iss\": \"issuer_information\",\n\t\"exp\": 1700107531,\n\t\"aud\": \"audience_information\",\n\t...\n }\n```\n\nThe `iss` , `exp` , and `aud` claims are all optional but are the most commonly present. A full list of possible registered claims and their associated information can be found on the [RFC 7519 standardization document](https://datatracker.ietf.org/doc/html/rfc7519#section-4.1).\n\nPublic claims represent the data intended to be processed by the receiving party. This is defined by the JWT issuer.\n\nBetween the issuing and receiving party, the private claims are information agreed to be shared. This is defined by the issuing party, agreed upon with the audience.\n\nThe entire payload section of the JWT is then Base64Url encoded. Just like Base64 encoding, the entire section is translated to binary and mapped to the Base64 alphabet below.\n\n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*vTkYzy29qml9W8kvndik4A.png)\n\nThe issue with standard Base64 encoding is that `+` and `/` are reserved characters for web applications, so the Base64Url alphabet replaces these with `—` and `_`.\n\n![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*6A56ak50Ff6KU69NekdPqA.png)\n\n`=` is an optional character for specifying an optional processing function. While it’s not common practice to use this, it may be present when viewing other JWTs out in the wild.\n\n### Signature\n\nThe signature will be created depending on the hash function defined in the header. For instance, if we’re using SHA256, your Signature hash will be generated by running the algorithm on the Base64Url encoded header + ‘.’ + the Base64Url encoded payload.\n\n## So, why JWTs?\n\nJWTs offer an all-inclusive, compact format to securely send data between clients and issuers.\n\nCompared to SAML (Security Assertion Markup Language Tokens), JWT’s encoded body is much more concise than the XML counterpart. Small sized data is much more ideal for HTML/HTTP environments. Both JWTs and SAML tokens can use a public/private key, but the difference in size is tremendous between the two with JWTs being significantly smaller.\n\nCompared to Simple Web Tokens (SWTs), JWTs are asymmetrically signed, meaning that the encryption key is not the same as the decryption key. The data can’t be decrypted simply by using the matching encryption key, such as with SWTs.\n\n## Conclusion\n\nI strongly encourage web developers to consider JWTs for their next venture or their current project. They’re small, they’re fast, and they can be information dense for complex applications."
  },
  {
    "id": 3,
    "url": "email-regex",
    "title": "Matching email addresses with RegEx",
    "date": "November 20, 2023",
    "preview": "This regex matches an email address based on standard convention for email header, domain name, and domain extensions respectively. The initial part of the expression matches a minimum of one, up to a maximum of 64 characters of valid username characters...",
    "content": "# Matching an email address using RegEx\n\n## Expression\n\nThe following RegEx expression matches a standard email address with valid email characters defined by the standards in [RFC 6532](https://www.rfc-editor.org/rfc/rfc6532#section-3.2).\n\n```\n/[a-zA-Z0-9-_+~]{1,64}[@]w{3,63}[.]w{2,6}/g \n ```\n\n ## Description\n\nThis regex matches an email address based on standard convention for email header, domain name, and domain extensions respectively.\n\nThe initial part of the expression matches a minimum of one, up to a maximum of 64 characters of valid username characters. Everything within the square brackets is representative of valid characters,\n\t- `a-z` includes all lowercase letters a through z\n\t- `A-Z` includes all uppercase letters a through z\n\t- `0-9` includes all numbers\n\t- `-`, `_`, `+`, and `~` are all individual characters that are included\n\nThe rule `{1,64}` at the end of the square bracket set indicates the number of valid characters that are allowed.\n\n`[@]` simply means that, here, the only valid character is a single at sign.\n\nThe string `/w{3,63}` means any valid word characters between lengths 3 and 63 characters can be accepted for the email domain. The same rule applies to the end of the RegEx expression with `w{2,6}`, saying any domain extension between valid lengths 2 and 6.\n\n`[.]` means that the only valid character here is a period.\n\nThe expression concludes with `/g`, indicating that the input should match any and all instances of a string that matches the criteria.\n\n## Meta Sequences\n\n**/w** : any word character (equivalent to *[a-zA-Z0-9_]* )\n\n## Quantifiers\n\n**a+** : matches one or more of the string leading the + symbol\n\n**a{ num1 , num2 }** : match any number of the leading string value between lengths *num1* and *num2*\n\n## Character Classes\n\n**[a]** : matches a single character of the string enclosed in the square brackets\n\n**[a-z]** : matches a range of characters\n\n**[a-zA-Z0-9-_+~]** : a combination of single characters and valid ranges can be a valid string\n\n## Flags and Modifiers\n\nThe `/g` pattern flag at the end of the regex specifies how many times this expression can be used to match against an input, with `/g` meaning ‘global’ it will attempt to match as many email addresses in the input text as it can."
  },
  {
    "id": 4,
    "url": "static-web-blog",
    "title": "Creating a simple blog with React",
    "date": "January 22, 2024",
    "preview": "I recently set out to finish up my web portfolio, and I *really* wanted to have a blog feature. When I finally had my GraphQL server set up, I kept getting `ERR_CONNECTION_REFUSED`. It took a bit of bashing my head against the wall to find that I had actually deployed my portfolio...",
    "content": "# Making a simple (and free) blog for a static website using React and onRender\n\nI want to preface by saying that this blog post will not cover any materials regarding [Express.js](https://expressjs.com/), and there's a reason for this.\n\n## Preface\n\nI recently set out to finish up my web portfolio, and I *really* wanted to have a blog feature. When I finally had my GraphQL server set up, I kept getting `ERR_CONNECTION_REFUSED`. It took a bit of bashing my head against the wall to find that I had actually deployed my portfolio as a static website. \n\n[![Screenshot-2024-01-22-at-12-33-35-AM.png](https://i.postimg.cc/52LjJbnf/Screenshot-2024-01-22-at-12-33-35-AM.png)](https://postimg.cc/FYFhgtM6)\n\nAt the time of writing this, I'm currently using [onRender](onrender.com) to host this site. Having a static website means that the client is only served web pages that don't rely on supplemental data sources, such as databases or response data from APIs. \n\n*Okay, so all we have to do is deploy the server and client as separate resources. That seems simple enough!*\n\nIf only it were that simple. $7 a month for server fees is complicated for a person like me, who has a Ziploc bag of quarters in the trunk of his car.\n\nNevertheless, I now had a beautiful, built-out web server going to waste in my repository ([which you look at here](https://github.com/stellyes/portfolio)) and still no blog to show for it. \n\n*Bummer! Back to the drawing board.*\n\n##  My Implementation\n\nSo, no server means I only have the automatic deployments from `main` to update my portfolio, provided by onRender's free tier. \n\nI decided to approach the problem using a JSON file. Nothing too crazy, but it replaced everything I had getting served to the client so it was as good as any solution.\n\nNow, the next problem: *How on earth am I going to store a React component as JSON?*\n\nMy brain will always jump to using `eval()`, no matter how much of a [security risk](https://www.digitalocean.com/community/tutorials/js-eval) it is. Instead, though, I decided to use something just as intuitive as running unchecked strings as code: Markdown! It's the semantic sibling of HTML, so it should be pretty easy to convert it, right?\n\nVery much right! The react library [`react-markdown`](https://www.npmjs.com/package/react-markdown) is as easy as wrapping your markdown data in a `<Markdown>` tag!\n\n[![Screenshot-2024-01-22-at-1-19-17-AM.png](https://i.postimg.cc/zfN8Kqfd/Screenshot-2024-01-22-at-1-19-17-AM.png)](https://postimg.cc/QFf2rG15)\n\nFrom here, all I needed to do was add some styling and I had my blog! \n\n## Blog maintenance and future development\n\nFinally, we must tackle the problem of maintenance. Every time I want to create, update, or delete a post, I have to open up VS Code, modify some static JSON data, and push my changes to main.\n\nNot only is this tedious, I may not always have access to a machine capable of easily doing this, so how do I add JSON data to my site in a more convenient way?\n\nI intend to use Python to automate the process of blog creation and posting. At the time of writing this, I have yet to pursue this option, but I currently use [StackEdit](stackedit.io) to do my Markdown writing and having all the functionality I need in a single application would be a nice feature.\n\nI plan on using [PyGithub](https://github.com/PyGithub/PyGithub) to handle pushing the changes to the repository, and [PySimpleGUI](https://realpython.com/pysimplegui-python/) to give it a graphical interface so that I'm not **exclusively** working in the command line. I have to give myself a break sometimes and give myself the user experience I work so diligently to curate... \n\nAs I develop this supplemental application, I'll share my progress on this very same blog! Thank you for you time, and I hope to see you here again soon!\n\n*- Ryan*"
  },
  {
    "id": 5,
    "url": "send-email-with-emailjs",
    "title": "Sending a form submission to an Email address using React",
    "date": "March 8, 2024",
    "preview": "Hi all, Recently, I was contracted to build a website for a tattoo artist and I was juggling all of the potential ways I could handle sending appointment booking/general contact inquiries to their...",
    "content": "# Sending a form submission to an Email address using React\n\nHi all,\n\nRecently, I was contracted to build a website for a tattoo artist and I was juggling all of the potential ways I could handle sending appointment booking/general contact inquiries to their email address. \n\n[![Screenshot-2024-03-06-at-3-07-15-PM.png](https://i.postimg.cc/L4nbrz9p/Screenshot-2024-03-06-at-3-07-15-PM.png)](https://postimg.cc/JtCxXHH6)\n\nWhat I ended up settling with was a service called [EmailJS](https://www.emailjs.com/). This simple service allows for web developers to add email-sending functionality to the front end of their site with next to no configuration needed on the back end.\n\n# Step 1: Getting Started\n\nThe first thing you're going to want to do is set up an account with EmailJS. You can do this by heading to their website and clicking one of the many \"Sign up\" buttons.\n\n[![Screenshot-2024-02-28-at-2-52-01-PM.png](https://i.postimg.cc/BvFrMmz0/Screenshot-2024-02-28-at-2-52-01-PM.png)](https://postimg.cc/t1XvgNyS)\n\nOnce you've verified your email address and logged in, you'll be taken to your EmailJS dashboard. From there, you'll click on \"Email Templates\".\n\n[![Screenshot-2024-02-28-at-2-58-20-PM.png](https://i.postimg.cc/4yK446dN/Screenshot-2024-02-28-at-2-58-20-PM.png)](https://postimg.cc/64XxYGnD)\n\nYou'll notice you're granted 200 emails to start testing the service. Since the cost of this is not a direct concern of mine, this means I have 200 test runs before I have to start digging into my own wallet. **Sweet!** \n\n## Step 2: Creating the email template\n\nFront-end devs: **be warned.** It may be intuitive at first, making your email template with the build in HTML editor that EmailJS offers, but this was one of my biggest roadblocks in development due to the not-so-clear restrictions that email-based HTML has over regular semantic HTML.\n\nOne of the biggest adjustments for me was that [Bootstrap](https://getbootstrap.com/) is not supported natively within *most* email services. With this in mind, I had to get creative with formatting.\n\nI wanted to have a logo image display at the top of each email, followed by the title, both centered within the viewport regardless of size. I was able to center it initially by importing the image as a standard `<img>` element and using inline styling to center it on the preview they offer, but this didn't translate well to the actual emails being sent.\n\nMy work-around involved using a `<div>` and the  `background-image` CSS modifier. \n\n[![Screenshot-2024-03-07-at-4-10-26-PM.png](https://i.postimg.cc/0NfCTVqX/Screenshot-2024-03-07-at-4-10-26-PM.png)](https://postimg.cc/zLyWWSvT)\n\nSetting the width to 100% and having a fixed height allows me to ensure that the image will sit properly within the div, regardless of the viewport size.\n\nAnother roadblock I encountered was the use of web-safe fonts. I have a font on the website called \"Colt Soft\" that I imported from the Adobe Creative Suite. \n\nWith regular HTML, importing this is no problem at all. I just need to include the `<link>` element in the head of my HTML document and I'm set. Unfortunately, for emails, this simply does not work like this.\n\nIn fact, **there isn't a way to work around this** without converting the font to an SVG/image file and including it inline in the code. This seemed excessive to me considering that the only person reading these emails will be the tattoo artist themselves. \n\n### Filling your EmailJS template with variables\n\nEmailJS works similar to Handlebars in that it uses double brackets - `{{ }}` - to signify where certain variables go by name. In the preview of your template, you'll write the variable names inline just as they'd appear in your API call.\n\n[![Screenshot-2024-03-07-at-4-23-49-PM.png](https://i.postimg.cc/0jxK9sdp/Screenshot-2024-03-07-at-4-23-49-PM.png)](https://postimg.cc/Pp35M07x)\n\nLooks good to me! Now, time to integrate it into my code!\n\n## Step 3: Connecting EmailJS with your codebase\n\nThis is actually the easy part. EmailJS has done an incredible job with their [documentation](https://www.emailjs.com/docs/), as well as with their API setup. \n\nAll you'll really need to do is two things:\n\n1. Organize your form parameters into a single JSON object.\n\n[![Screenshot-2024-03-07-at-4-37-37-PM.png](https://i.postimg.cc/8Pm9pmDW/Screenshot-2024-03-07-at-4-37-37-PM.png)](https://postimg.cc/1f4JM685)\n\n2. Include your form parameters with the [necessary data required by EmailJS](https://www.emailjs.com/docs/rest-api/send/#parameters) and format it correctly for the API call\n\n[![Screenshot-2024-03-07-at-4-37-52-PM.png](https://i.postimg.cc/gjqS0G9d/Screenshot-2024-03-07-at-4-37-52-PM.png)](https://postimg.cc/ZvnF7tKD)\n\nThe `service_id`, `template_id`, and `user_id` will be made available to you after completing step one.\n\nAll that's left to do is send the form to their REST API! I've implemented that as shown below.\n\n[![Screenshot-2024-03-08-at-3-18-15-PM.png](https://i.postimg.cc/y8Nr7KrL/Screenshot-2024-03-08-at-3-18-15-PM.png)](https://postimg.cc/gnfKKCph)\n\nProper error handling is always important! \n\n## Closing Thoughts\n\nEmailJS is a convenient tool that I encourage all web developers to investigate. Its minimal learning curve makes it one of the easiest services to implement in my ongoing experience using Javascript.\n\nHappy coding!\n\n-*Ryan*"
  }
]
